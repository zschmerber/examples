root = {}
root.api.request.uid = "https://cloud.tenable.com/assets/export/{export_uuid}/chunks/{chunk_id}"
root.api.operation = "get"

root.activity_name = "Collect"
root.activity_id = 2
# root.actor
root.category_name = "Discovery"
root.category_uid = 5
root.class_name = "Device Inventory Info"
root.class_uid = 5001

# root.cloud # TODO
# root.cloud.account
# root.cloud.zone
# root.cloud.org
# root.cloud.project_uid
root.cloud.provider = "AWS"
root.cloud.region = this.env

# root.count

# Agent Array
# root.device.agent_list # TODO
root.device.uid_alt = this.bios_uuid
# root.device.autoscale_uid
# root.device.is_compliant
root.device.created_time_dt = this.created_at
# root.device.created_time
# root.device.desc
root.device.domain = this.fqdns.0 # incomplete
# root.device.first_seen_time
root.device.first_seen_time.dt = this.first_seen
# root.device.location
# root.device.groups
# root.device.hw_info # TODO
root.device.hostname = this.hostnames.0 # incomplete
# root.device.hypervisor
# root.device.imei
root.device.ip = this.ipv4.0 # incomplete
# root.device.image # TODO this.aws_ec2_instance_ami_id
root.device.instance_uid = this.id
# root.device.last_seen_time = this.last_seen.ts_unix_micro()
root.device.last_seen_time_dt = this.last_seen
root.device.mac = this.mac_addresses.0 # incomplete
# root.device.is_managed
# root.device.modified_time
# root.device.modified_time_dt
# root.device.name = # TODO 
# root.device.interface_uid (See Network Interfaces)
# root.device.interface_name
# TODO
# root.device.network_interfaces = this.output.filter(item -> item.key.contains("ipv")).collapse().key_values().map_each(item -> {
#     "ip": match {
#         item.key.contains("ipv") => item.value
#         },

#     "type": match {
#         item.key.contains("ipv6") => "ipv6"
#         item.key.contains("ipv4") => "ipv4"
#         },
#     "type_id": 0
#         })
# root.device.zone = this.aws_availability_zone or this.gcp_zone
root.device.os = this.operating_systems.0 # incomplete # TODO
# root.device.org
root.device.owner = this.aws_owner_id
# root.device.is_personal
# root.device.region = this.aws_region
root.device.risk_level
root.device.risk_level_id
root.device.risk_score
root.device.subnet
root.device.subnet_uid
root.device.is_trusted
root.device.type
root.device.type_id
# root.device.uid cloud instance id? or bios id
root.device.vlan_uid
root.device.vpc_uid = this.aws_vpc_id



# root.duration
# root.end_time
# root.end_time_dt (See Device)
# root.enrichments
# root.time_dt
# root.message

# root.metadata.correlation_uid # scan ID?
# root.metadata.data_classification
# root.metadata.event_code # Export ID
# root.metadata.uid # Chunk ID
# root.metadata.labels # Export Request Filter
# root.metadata.log_level
root.metadata.log_name = "Export Asset"
root.metadata.log_provider = "Tenable Vulnerability Management"
# root.metadata.version # Tenable API version
# root.metadata.logged_time # Export Time
# root.metadata.logged_time_dt
# root.metadata.oggers
# root.metadata.modified_time
# root.metadata.modified_time_dt
# root.metadata.original_time
# root.metadata.processed_time
# root.metadata.processed_time_dt
# root.metadata.product.data_classification
# root.metadata.product.feature
# root.metadata.product.lang
root.metadata.product.name = "Vulnerability Management"
# root.metadata.product.path
# root.metadata.product.cpe_name # TODO
root.metadata.product.url_string = "https://cloud.tenable.com"
# root.metadata.product.uid
root.metadata.product.vendor_name = "Tenable"
# root.metadata.product.version
root.metadata.profiles = ["host","datetime", "cloud"]
# root.metadata.extensions
# root.metadata.sequence
# root.metadata.tenant_uid # customer ID
root.metadata.version = "1.2.0"
# root.observables # TODO
# for each ipv4s, ipv6s
# obs.type = ipv

root.raw_data = this
root.severity_id = 1
root.severity = "Informational"

#root.start_time_dt (See Device)
# root.start_time

root.status = "Other"
# root.status_code
# root.status_detail
root.status_id = 99

   
# observables = root.without("unmapped").with("device.ip", "device.hostname", "device.mac").( item -> { 
# "a": match {item.device.exists("hostname") => {"name": "device.hostname", "type": "User", "type_id": 1, "value": item.device.hostname}},
# "b": match {item.device.exists("ip") => {"name": "device.ip", "type": "IP Address", "type_id": 2, "value": item.device.ip}},
# "c": match {item.device.exists("ip") => {"name": "device.ip", "type": "IP Address", "type_id": 2, "value": item.device.ip}},
# "d": match {item.device.exists("mac") => {"name": "device.mac", "type": "MAC Address", "type_id": 3, "value": item.device.mac}},
# }).values()

# root.timezone_offset
root.type_uid =  500102
root.type_name = "Device Inventory Info: Collect"

# root.unmapped = this.without(
#    "msg",
#    "env",
#    "time",
#    "output.updated_at",
#    "output.mac_address",
#    "output.last_seen",
#    "output.ipv4",
#    "output.id",
#    "output.hostname",
#    "output.fqdn",
#    "output.first_seen",
#    "output.last_seen",
#    "output.aws_ec2_instance_id",
#    "output.ipv6",
#    "output.ipv4",
#    )